"""A set of tools for working with NGS data in Python."""

import argparse
import pyngs.scripts


def main():
    """Run the program."""
    parser = argparse.ArgumentParser(
        prog="pyngs_tools",
        description=""".""")
    subparsers = parser.add_subparsers(help="sub-command help")

    #
    # cigar-to-bed command
    #
    sparser = subparsers.add_parser(
        "cigar-to-bed",
        help="""Generate BED entries for bases
        covered by the specified CIGAR operation in a SAM
        file.""")
    sparser.add_argument(
        "-s", "--sam", dest="sam",
        type=str, nargs="?", default="stdin",
        help="""The SAM file of which the CIGAR entries will
                be converted to BED entries.""")
    sparser.add_argument(
        "-b", "--bed", dest="bed",
        type=str, nargs="?", default="stdout",
        help="The path to the output BED file.")
    sparser.add_argument(
        "-c", "--cigar-operations", dest="operations",
        type=str, nargs="+",
        help="The CIGAR operations to convert to BED entries.")
    sparser.add_argument(
        "-t", "--tags", dest="tags",
        type=str, nargs="*",
        help="""The BAM tags to add to the comment column in the
                BED entries. Use the keyword __sample__ to add the
                sample as a comment.""")
    sparser.set_defaults(func=pyngs.scripts.cigar_to_bed)

    #
    # merge bed entries
    #
    sparser = subparsers.add_parser(
        "merge-bed-entries",
        help="""
        Merge BED entries that represent the same DNA fragment.
        """)
    sparser.add_argument(
        "-i", "--input", dest="input",
        type=str, nargs="?", default="stdin",
        help="""The BED file with the entries to process.""")
    sparser.add_argument(
        "-o", "--output", dest="output",
        type=str, nargs="?", default="stdout",
        help="The path to the BED with the merged entries.")
    sparser.add_argument(
        "-t", "--tag", dest="tag",
        type=str, nargs="?", default="READNAME",
        help="The tag on which to merge the entries.")
    sparser.set_defaults(func=pyngs.scripts.merge_bed_entries)

    #
    # consensus
    #
    sparser = subparsers.add_parser(
        "umi-consensus",
        help="""
        Generate consensus alignments for alignments with the
        same UMI.
        """)
    sparser.add_argument(
        "-s", "--sam", dest="sam",
        type=str, nargs="?", default="stdin",
        help="""The input SAM file sorted on the tag
        with samtools sort -t {tag}.""")
    sparser.add_argument(
        "-t", "--tag", dest="tag",
        type=str, nargs="?", default="um",
        help="The tag-name for the UMI tag.")
    sparser.add_argument(
        "-r", "--discard", dest="discard",
        type=bool, nargs="?", default=False,
        help="Will non consensus alignments be discarded.")
    sparser.add_argument(
        "-d", "--distance", dest="distance",
        type=int, nargs="?", default=20,
        help="""The allowed distance between the start postion of
        alignments with the same UMI.""")
    sparser.add_argument(
        "-w", "--workers", dest="workers",
        type=int, nargs="?", default=8,
        help="""The number of workers for the consensus alignments.""")
    sparser.add_argument(
        "-o", "--output", dest="out",
        type=str, nargs="?", default="stdout",
        help="The output SAM file with the consensus sequences.")
    sparser.set_defaults(func=pyngs.scripts.run_consensus)

    #
    # filter-by-samtag
    #
    sparser = subparsers.add_parser(
        "filter-by-samtag",
        help="""
        Filter a SAM file by sam-tag.
        """)
    sparser.add_argument(
        "-s", "--sam", dest="sam",
        type=str, nargs="?", default="stdin",
        help="The SAM file with the alignments to filter.")
    sparser.add_argument(
        "-o", "--output", dest="out",
        type=str, nargs="?", default="stdout",
        help="The output SAM file.")
    sparser.add_argument(
        "-t", "--tag", dest="tag",
        type=str, help="The tag-name to filter on.")
    sparser.add_argument(
        "-y", "--type", dest="type",
        choices=["equals", "greater", "less"], default="equals",
        type=str, help="The type of filter to use.")
    sparser.add_argument(
        "-v", "--value", dest="value",
        type=str, help="The value to filter on.")
    sparser.add_argument(
        "--discard-absent", dest="discard", default=False,
        type=bool,
        help="Discard entries for which the tag could not be found.")
    sparser.set_defaults(func=pyngs.scripts.filter_by_samtag)

    #
    # Extract BED overlaps
    #
    sparser = subparsers.add_parser(
        "extract-overlaps",
        help="""
        Parses  bedtools intersect -wao -sorted -a [BED5 file] -b [GTF file] output
        """)
    sparser.add_argument(
        "-i", "--input", dest="input",
        type=str, nargs="?", default="stdin",
        help="The file with overlaps.")
    sparser.add_argument(
        "-o", "--output", dest="output",
        type=str, nargs="?", default="stdout",
        help="The output tab-delimited text file.")
    sparser.add_argument(
        "-s", "--strand", dest="strand",
        choices=["same", "opposite", "any"], default="any",
        type=str, help="How to use the strand information of the overlaps.")
    sparser.add_argument(
        "--which", dest="which", default=["exon"],
        type=str, help="Which types in the GTF file to count.")
    sparser.add_argument(
        "--who", dest="who", default=["Parent"],
        type=str, help="""The field with the ids in the GFF
        file to aggregate over.""")
    sparser.add_argument(
        "--what", dest="what", default="READNAME",
        type=str, help="What to count.")
    sparser.add_argument(
        "--gtf", dest="gtf", default=False,
        type=bool, help="the intersect was performed with a GTF file")
    sparser.set_defaults(func=pyngs.scripts.extract_overlaps)

    #
    # Haplotype VCF files
    #
    sparser = subparsers.add_parser(
        "haplotype-vcf",
        description="""Haplotype a VCf file based on the
        child, father, mother relation.""")
    sparser.add_argument(
        "-v", "--vcf", dest="vcf",
        type=str, nargs="?", default="stdin",
        help="The input VCF file.")
    sparser.add_argument(
        "-o", "--output", dest="output",
        type=str, nargs="?", default="stdout",
        help="The output VCF file.")
    sparser.add_argument(
        "-r", "--relations", dest="relations",
        type=str, nargs="?",
        help="""A file with the trio relations in the
        order child, father, mother.""")
    sparser.add_argument(
        "--offspring", dest="offspring",
        type=str, nargs="*",
        help="The sample names of the offspring.")
    sparser.add_argument(
        "--fathers", dest="fathers",
        type=str, nargs="*",
        help="The sample names of the fathers.")
    sparser.add_argument(
        "--mothers", dest="mothers",
        type=str, nargs="*",
        help="The sample names of the mothers.")
    sparser.set_defaults(func=pyngs.scripts.haplotype_vcf)

    # parse the argument and call the script
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":

    # run the main program loop
    main()
