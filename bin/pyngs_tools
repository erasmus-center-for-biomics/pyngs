import argparse
import sys

import pyngs.scripts


def main():
    """Run the program."""
    parser = argparse.ArgumentParser(
        prog="pyngs_tools",
        description=""".""")
    subparsers = parser.add_subparsers(help="sub-command help")

    #
    # cigar-to-bed command
    #
    parser_ctob = subparsers.add_parser(
        "cigar-to-bed",
        help="""Generate BED entries for bases
        covered by the specified CIGAR operation in a SAM
        file.""")
    parser_ctob.add_argument(
        "-s", "--sam", dest="sam",
        type=str, nargs="?", default="stdin",
        help="""The SAM file of which the CIGAR entries will
                be converted to BED entries.""")
    parser_ctob.add_argument(
        "-b", "--bed", dest="bed",
        type=str, nargs="?", default="stdout",
        help="The path to the output BED file.")
    parser_ctob.add_argument(
        "-c", "--cigar-operations", dest="operations",
        type=str, nargs="+",
        help="The CIGAR operations to convert to BED entries.")
    parser_ctob.add_argument(
        "-t", "--tags", dest="tags",
        type=str, nargs="*",
        help="""The BAM tags to add to the comment column in the
                BED entries. Use the keyword __sample__ to add the
                sample as a comment.""")
    parser_ctob.set_defaults(func=pyngs.scripts.cigar_to_bed)

    #
    # merge bed entries
    #
    parser_mbe = subparsers.add_parser(
        "merge-bed-entries",
        help="""
        Merge BED entries that represent the same DNA fragment.
        """)
    parser_mbe.add_argument(
        "-i", "--input", dest="input",
        type=str, nargs="?", default="stdin",
        help="""The BED file with the entries to process.""")
    parser_mbe.add_argument(
        "-o", "--ouput", dest="ouput",
        type=str, nargs="?", default="stdout",
        help="The path to the BED with the merged entries.")
    parser_mbe.add_argument(
        "-t", "--tag", dest="tag",
        type=str, nargs="?", default="READNAME",
        help="The tag on which to merge the entries.")
    parser_mbe.set_defaults(func=pyngs.scripts.merge_bed_entries)

    #
    # consensus
    #
    parser_con = subparsers.add_parser(
        "umi-consensus",
        help="""
        Generate consensus alignments for alignments with the
        same UMI.
        """)
    parser_con.add_argument(
        "-s", "--sam", dest="sam",
        type=str, nargs="?", default="stdin",
        help="The input SAM file sorted on the tag with samtools sort -t {tag}.")
    parser_con.add_argument(
        "-t", "--tag", dest="tag",
        type=str, nargs="?", default="um",
        help="The tag-name for the UMI tag.")
    parser_con.add_argument(
        "-d", "--distance", dest="distance",
        type=int, nargs="?", default=20,
        help="The allowed distance between the start postion of alignments with the same UMI.")
    parser_con.add_argument(
        "-o", "--output", dest="out",
        type=str, nargs="?", default="stdout",
        help="The output SAM file with the consensus sequences.")
    parser_con.set_defaults(func=pyngs.scripts.run_consensus)

    # parse the argument and call the script
    args = parser.parse_args()
    print(args)
    args.func(args)


if __name__ == "__main__":

    # run the main program loop
    main()
